$date
	Sun Apr 12 11:16:25 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module _cpu $end
$var wire 1 # clk $end
$var wire 2 $ control_mux_for_PC [1:0] $end
$var wire 6 % funct [5:0] $end
$var wire 1 & is_I_type $end
$var wire 1 ' is_J_type $end
$var wire 1 ( is_R_type $end
$var wire 1 ) is_alu_zero $end
$var wire 1 * is_full_rnum1 $end
$var wire 1 + is_full_rnum2 $end
$var wire 1 , is_load_PC $end
$var wire 1 - is_nop $end
$var wire 1 . is_previous_nop $end
$var wire 1 / is_write_from_mem $end
$var wire 1 0 is_write_mem $end
$var wire 1 1 is_write_reg $end
$var wire 6 2 opcode [5:0] $end
$var wire 6 3 opcode_alu [5:0] $end
$var wire 1 4 rst $end
$scope module _data_path_cpu $end
$var wire 26 5 ADDR [25:0] $end
$var wire 16 6 IMM [15:0] $end
$var wire 1 # clk $end
$var wire 2 7 control_mux_for_PC [1:0] $end
$var wire 32 8 curr_inst [31:0] $end
$var wire 32 9 expand_ADDR [31:0] $end
$var wire 32 : expand_IMM [31:0] $end
$var wire 6 ; funct [5:0] $end
$var wire 32 < in_PC [31:0] $end
$var wire 32 = inst_out_command [31:0] $end
$var wire 1 & is_I_type $end
$var wire 1 ' is_J_type $end
$var wire 1 ( is_R_type $end
$var wire 1 ) is_alu_zero $end
$var wire 1 * is_full_rnum1 $end
$var wire 1 + is_full_rnum2 $end
$var wire 1 , is_load_PC $end
$var wire 1 - is_nop $end
$var wire 1 / is_write_from_mem $end
$var wire 1 0 is_write_mem $end
$var wire 1 1 is_write_reg $end
$var wire 6 > opcode [5:0] $end
$var wire 6 ? opcode_alu [5:0] $end
$var wire 32 @ out_alu [31:0] $end
$var wire 32 A out_from_adder_puls_IMM [31:0] $end
$var wire 32 B out_from_adder_puls_one [31:0] $end
$var wire 32 C out_memory [31:0] $end
$var wire 32 D out_mux_for_alu [31:0] $end
$var wire 32 E out_mux_for_wdata [31:0] $end
$var wire 5 F out_mux_for_wnum [4:0] $end
$var wire 5 G rd [4:0] $end
$var wire 32 H rdata1 [31:0] $end
$var wire 32 I rdata2 [31:0] $end
$var wire 5 J rs [4:0] $end
$var wire 1 4 rst $end
$var wire 5 K rt [4:0] $end
$var wire 5 L shamt [4:0] $end
$var wire 16 M zero [15:0] $end
$scope module _PC $end
$var wire 1 # clk $end
$var wire 32 N in [31:0] $end
$var wire 1 , load $end
$var wire 1 4 rst $end
$var reg 32 O out [31:0] $end
$upscope $end
$scope module _inst $end
$var wire 32 P curr_command [31:0] $end
$var wire 32 Q out_data [31:0] $end
$var wire 1 4 rst $end
$upscope $end
$scope module _mux_for_regs $end
$var wire 10 R in [9:0] $end
$var wire 1 & n $end
$var wire 5 S out [4:0] $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$upscope $end
$scope module _regs $end
$var wire 1 # clk $end
$var wire 1 T is_load_in_reg0 $end
$var wire 1 U is_load_in_reg1 $end
$var wire 1 V is_load_in_reg2 $end
$var wire 1 W is_load_in_reg3 $end
$var wire 32 X out_reg0 [31:0] $end
$var wire 32 Y out_reg1 [31:0] $end
$var wire 32 Z out_reg2 [31:0] $end
$var wire 32 [ out_reg3 [31:0] $end
$var wire 32 \ rdata1 [31:0] $end
$var wire 32 ] rdata2 [31:0] $end
$var wire 5 ^ rnum1 [4:0] $end
$var wire 5 _ rnum2 [4:0] $end
$var wire 1 4 rst $end
$var wire 32 ` wdata [31:0] $end
$var wire 5 a wnum [4:0] $end
$var wire 1 1 write $end
$scope module _demux $end
$var wire 1 1 in $end
$var wire 2 b n [1:0] $end
$var wire 4 c out [3:0] $end
$scope begin demux_block $end
$var integer 32 d k [31:0] $end
$upscope $end
$scope begin assign_block[0] $end
$upscope $end
$scope begin assign_block[1] $end
$upscope $end
$scope begin assign_block[2] $end
$upscope $end
$scope begin assign_block[3] $end
$upscope $end
$upscope $end
$scope module _reg1 $end
$var wire 1 # clk $end
$var wire 32 e in [31:0] $end
$var wire 1 U load $end
$var wire 1 4 rst $end
$var reg 32 f out [31:0] $end
$upscope $end
$scope module _reg2 $end
$var wire 1 # clk $end
$var wire 32 g in [31:0] $end
$var wire 1 V load $end
$var wire 1 4 rst $end
$var reg 32 h out [31:0] $end
$upscope $end
$scope module _reg3 $end
$var wire 1 # clk $end
$var wire 32 i in [31:0] $end
$var wire 1 W load $end
$var wire 1 4 rst $end
$var reg 32 j out [31:0] $end
$upscope $end
$scope module _mux1 $end
$var wire 128 k in [127:0] $end
$var wire 2 l n [1:0] $end
$var wire 32 m out [31:0] $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$scope begin gen_block[2] $end
$upscope $end
$scope begin gen_block[3] $end
$upscope $end
$upscope $end
$scope module _mux2 $end
$var wire 128 n in [127:0] $end
$var wire 2 o n [1:0] $end
$var wire 32 p out [31:0] $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$scope begin gen_block[2] $end
$upscope $end
$scope begin gen_block[3] $end
$upscope $end
$upscope $end
$upscope $end
$scope module _mux_for_alu $end
$var wire 64 q in [63:0] $end
$var wire 1 & n $end
$var wire 32 r out [31:0] $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$upscope $end
$scope module _alu $end
$var wire 1 # clk $end
$var wire 32 s in1 [31:0] $end
$var wire 32 t in2 [31:0] $end
$var wire 6 u opcode [5:0] $end
$var wire 1 4 rst $end
$var wire 1 ) zero $end
$var reg 32 v out [31:0] $end
$upscope $end
$scope module _memory $end
$var wire 5 w addr [4:0] $end
$var wire 1 # clk $end
$var wire 32 x idata [31:0] $end
$var wire 1 y is_load_in_reg0 $end
$var wire 1 z is_load_in_reg1 $end
$var wire 1 { is_load_in_reg2 $end
$var wire 1 | is_load_in_reg3 $end
$var wire 1 } is_load_in_reg4 $end
$var wire 1 ~ is_load_in_reg5 $end
$var wire 1 !" is_load_in_reg6 $end
$var wire 1 "" is_load_in_reg7 $end
$var wire 32 #" odata [31:0] $end
$var wire 32 $" out_reg0 [31:0] $end
$var wire 32 %" out_reg1 [31:0] $end
$var wire 32 &" out_reg2 [31:0] $end
$var wire 32 '" out_reg3 [31:0] $end
$var wire 32 (" out_reg4 [31:0] $end
$var wire 32 )" out_reg5 [31:0] $end
$var wire 32 *" out_reg6 [31:0] $end
$var wire 32 +" out_reg7 [31:0] $end
$var wire 1 4 rst $end
$var wire 1 0 write $end
$scope module _demux $end
$var wire 1 0 in $end
$var wire 3 ," n [2:0] $end
$var wire 8 -" out [7:0] $end
$scope begin demux_block $end
$var integer 32 ." k [31:0] $end
$upscope $end
$scope begin assign_block[0] $end
$upscope $end
$scope begin assign_block[1] $end
$upscope $end
$scope begin assign_block[2] $end
$upscope $end
$scope begin assign_block[3] $end
$upscope $end
$scope begin assign_block[4] $end
$upscope $end
$scope begin assign_block[5] $end
$upscope $end
$scope begin assign_block[6] $end
$upscope $end
$scope begin assign_block[7] $end
$upscope $end
$upscope $end
$scope module _reg0 $end
$var wire 1 # clk $end
$var wire 32 /" in [31:0] $end
$var wire 1 y load $end
$var wire 1 4 rst $end
$var reg 32 0" out [31:0] $end
$upscope $end
$scope module _reg1 $end
$var wire 1 # clk $end
$var wire 32 1" in [31:0] $end
$var wire 1 z load $end
$var wire 1 4 rst $end
$var reg 32 2" out [31:0] $end
$upscope $end
$scope module _reg2 $end
$var wire 1 # clk $end
$var wire 32 3" in [31:0] $end
$var wire 1 { load $end
$var wire 1 4 rst $end
$var reg 32 4" out [31:0] $end
$upscope $end
$scope module _reg3 $end
$var wire 1 # clk $end
$var wire 32 5" in [31:0] $end
$var wire 1 | load $end
$var wire 1 4 rst $end
$var reg 32 6" out [31:0] $end
$upscope $end
$scope module _reg4 $end
$var wire 1 # clk $end
$var wire 32 7" in [31:0] $end
$var wire 1 } load $end
$var wire 1 4 rst $end
$var reg 32 8" out [31:0] $end
$upscope $end
$scope module _reg5 $end
$var wire 1 # clk $end
$var wire 32 9" in [31:0] $end
$var wire 1 ~ load $end
$var wire 1 4 rst $end
$var reg 32 :" out [31:0] $end
$upscope $end
$scope module _reg6 $end
$var wire 1 # clk $end
$var wire 32 ;" in [31:0] $end
$var wire 1 !" load $end
$var wire 1 4 rst $end
$var reg 32 <" out [31:0] $end
$upscope $end
$scope module _reg7 $end
$var wire 1 # clk $end
$var wire 32 =" in [31:0] $end
$var wire 1 "" load $end
$var wire 1 4 rst $end
$var reg 32 >" out [31:0] $end
$upscope $end
$scope module _mux $end
$var wire 256 ?" in [255:0] $end
$var wire 3 @" n [2:0] $end
$var wire 32 A" out [31:0] $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$scope begin gen_block[2] $end
$upscope $end
$scope begin gen_block[3] $end
$upscope $end
$scope begin gen_block[4] $end
$upscope $end
$scope begin gen_block[5] $end
$upscope $end
$scope begin gen_block[6] $end
$upscope $end
$scope begin gen_block[7] $end
$upscope $end
$upscope $end
$upscope $end
$scope module _mux_for_wdata $end
$var wire 64 B" in [63:0] $end
$var wire 1 / n $end
$var wire 32 C" out [31:0] $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$upscope $end
$scope module _regs_hazzard $end
$var wire 1 # clk $end
$var wire 1 D" is_full_reg_0 $end
$var wire 1 E" is_full_reg_1 $end
$var wire 1 F" is_full_reg_2 $end
$var wire 1 G" is_full_reg_3 $end
$var wire 1 * is_full_rnum1 $end
$var wire 1 + is_full_rnum2 $end
$var wire 1 - is_nop $end
$var wire 1 1 is_write_reg $end
$var wire 5 H" prev_wnum [4:0] $end
$var wire 5 I" rnum1 [4:0] $end
$var wire 5 J" rnum2 [4:0] $end
$var wire 1 4 rst $end
$var wire 5 K" wnum [4:0] $end
$scope module _demux $end
$var wire 1 1 in $end
$var wire 2 L" n [1:0] $end
$var wire 4 M" out [3:0] $end
$scope begin demux_block $end
$var integer 32 N" k [31:0] $end
$upscope $end
$scope begin assign_block[0] $end
$upscope $end
$scope begin assign_block[1] $end
$upscope $end
$scope begin assign_block[2] $end
$upscope $end
$scope begin assign_block[3] $end
$upscope $end
$upscope $end
$scope module _mux_rnum1 $end
$var wire 4 O" in [3:0] $end
$var wire 2 P" n [1:0] $end
$var wire 1 * out $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$scope begin gen_block[2] $end
$upscope $end
$scope begin gen_block[3] $end
$upscope $end
$upscope $end
$scope module _mux_rnum2 $end
$var wire 4 Q" in [3:0] $end
$var wire 2 R" n [1:0] $end
$var wire 1 + out $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$scope begin gen_block[2] $end
$upscope $end
$scope begin gen_block[3] $end
$upscope $end
$upscope $end
$scope module _reg $end
$var wire 1 # clk $end
$var wire 5 S" in [4:0] $end
$var wire 1 T" load $end
$var wire 1 4 rst $end
$var reg 5 U" out [4:0] $end
$upscope $end
$upscope $end
$scope module _adder_plus_one $end
$var wire 1 # clk $end
$var wire 1 , load $end
$var wire 32 V" out [31:0] $end
$var wire 1 4 rst $end
$var wire 32 W" x [31:0] $end
$var wire 32 X" y [31:0] $end
$upscope $end
$scope module _adder_puls_IMM $end
$var wire 1 # clk $end
$var wire 1 Y" load $end
$var wire 32 Z" out [31:0] $end
$var wire 1 4 rst $end
$var wire 32 [" x [31:0] $end
$var wire 32 \" y [31:0] $end
$upscope $end
$scope module _mux_for_PC $end
$var wire 96 ]" in [95:0] $end
$var wire 2 ^" n [1:0] $end
$var wire 32 _" out [31:0] $end
$scope begin gen_block[0] $end
$upscope $end
$scope begin gen_block[1] $end
$upscope $end
$scope begin gen_block[2] $end
$upscope $end
$upscope $end
$upscope $end
$scope module _control_path_cpu $end
$var wire 1 # clk $end
$var wire 6 `" funct [5:0] $end
$var wire 1 ) is_alu_zero $end
$var wire 1 * is_full_rnum1 $end
$var wire 1 + is_full_rnum2 $end
$var wire 6 a" opcode [5:0] $end
$var wire 1 4 rst $end
$var reg 2 b" control_mux_for_PC [1:0] $end
$var reg 1 c" is_I_type $end
$var reg 1 d" is_J_type $end
$var reg 1 e" is_R_type $end
$var reg 1 f" is_load_PC $end
$var reg 1 g" is_nop $end
$var reg 1 h" is_previous_nop $end
$var reg 1 i" is_write_from_mem $end
$var reg 1 j" is_write_mem $end
$var reg 1 k" is_write_reg $end
$var reg 6 l" opcode_alu [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 l"
0k"
0j"
0i"
1h"
0g"
1f"
0e"
0d"
0c"
b0 b"
b1000 a"
b1 `"
b1 _"
b0 ^"
b10000000000000000000000000000000100000000000000010000000000000001 ]"
b1 \"
b0 ["
b1 Z"
zY"
b1 X"
b0 W"
b1 V"
b0 U"
1T"
b0 S"
b1 R"
b0 Q"
b0 P"
b0 O"
b100 N"
b0 M"
b0 L"
b0 K"
b1 J"
b0 I"
b0 H"
0G"
0F"
0E"
0D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b1000 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
0""
0!"
0~
0}
0|
0{
0z
0y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b1 q
b0 p
b1 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b100 d
b0 c
b0 b
b0 a
b0 `
b1 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
0W
0V
0U
0T
b0 S
b1 R
b100000000000010000000000000001 Q
b0 P
b0 O
b1 N
b0 M
b0 L
b1 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b1 B
b1 A
b0 @
b0 ?
b1000 >
b100000000000010000000000000001 =
b1 <
b1 ;
b1 :
b10000000000000001 9
b0 8
b0 7
b1 6
b10000000000000001 5
14
b0 3
b1000 2
01
00
0/
1.
0-
1,
0+
0*
1)
0(
0'
0&
b1 %
b0 $
1#
1"
1!
$end
#50
b1000 ."
1*
1U
b1 E
b1 `
b1 e
b1 g
b1 i
b1 C"
b1 ,"
b1 @"
b1 w
b1000 O"
b1000 Q"
1D"
0T
b1 b
b1 v
0)
b100000000000000000000000000000000 B"
b1 @
b1000 M"
b100 N"
b100 c
b100 d
b1 D
b1 r
b1 t
b1 F
b1 S
b1 a
b1 K"
b1 S"
b100000 l"
b100000 3
b100000 ?
b100000 u
1k"
11
1c"
1&
0h"
0.
0"
04
0!
0#
#100
b1000 ."
b0 E
b0 `
b0 e
b0 g
b0 i
b0 C"
b0 ,"
b0 @"
b0 w
b0 v
1)
b0 B"
b0 @
b0 D
b0 r
b0 t
b0 l"
b0 3
b0 ?
b0 u
0f"
0,
0k"
01
0c"
0&
1h"
1.
0V
0U
0*
b0 c
b100 d
b0 b
0E"
b0 O"
b0 Q"
0D"
b0 F
b0 S
b0 a
b0 K"
b0 S"
b0 M"
b100 N"
b10 o
b10 R"
b10 <
b10 N
b10 _"
b1 L"
b100000000000000001 9
b100000000000000001 5
b10 R
b10 K
b10 _
b10 J"
1g"
0T"
1-
b1 U"
b1 H"
b1 f
b10000000000000000000000000000000000000000000000000000000000000000 n
b10000000000000000000000000000000000000000000000000000000000000000 k
b1 Y
b1 O
b100000000000100000000000000001 =
b100000000000100000000000000001 Q
b10 B
b10 V"
b100000000000000000000000000000001000000000000000100000000000000001 ]"
b10 A
b10 Z"
b1 8
b1 P
b1 W"
b1 ["
1!
1#
#150
0!
0#
#200
b1000 ."
1V
b1 E
b1 `
b1 e
b1 g
b1 i
b1 C"
b1 ,"
b1 @"
b1 w
b100 O"
b100 Q"
1E"
0T
b10 b
b1 v
0)
b100000000000000000000000000000000 B"
b1 @
b100 M"
b100 N"
b10 c
b100 d
b1 D
b1 r
b1 t
b10 F
b10 S
b10 a
b10 K"
b10 S"
b100000 l"
b100000 3
b100000 ?
b100000 u
1f"
1,
1k"
11
1c"
1&
0h"
0.
0g"
1T"
0-
1!
1#
#250
0!
0#
#300
b1000 ."
b10 E
b10 `
b10 e
b10 g
b10 i
b10 C"
b10 ,"
b10 @"
1+
b10 w
b10 v
b1000000000000000000000000000000000 B"
b10 @
1F"
b10 O"
b10 Q"
0E"
b1 H
b1 \
b1 m
b1 s
0*
b10 M"
b100 N"
b100000000000000000000000000000001 q
b1 I
b1 ]
b1 p
b1 x
b1 /"
b1 1"
b1 3"
b1 5"
b1 7"
b1 9"
b1 ;"
b1 ="
b1 l
b1 P"
b11 <
b11 N
b11 _"
b10 L"
b1000100000000000000001 9
b1000100000000000000001 5
b1 J
b1 ^
b1 I"
b10 U"
b10 H"
b1 h
b10000000000000000000000000000000100000000000000000000000000000000 n
b10000000000000000000000000000000100000000000000000000000000000000 k
b1 Z
b10 O
b100000001000100000000000000001 =
b100000001000100000000000000001 Q
b11 B
b11 V"
b110000000000000000000000000000001100000000001000100000000000000001 ]"
b11 A
b11 Z"
b10 8
b10 P
b10 W"
b10 ["
1!
1#
#350
0!
0#
#400
b1000 ."
1W
0V
b11 E
b11 `
b11 e
b11 g
b11 i
b11 C"
b11 ,"
b11 @"
b1 c
b100 d
b11 w
b11 b
b11 v
b1100000000000000000000000000000000 B"
b11 @
b11 F
b11 S
b11 a
b11 K"
b11 S"
0+
b10 H
b10 \
b10 m
b10 s
1*
b11 o
b11 R"
b10 l
b10 P"
b100 <
b100 N
b100 _"
b1 q
b0 I
b0 ]
b0 p
b0 x
b0 /"
b0 1"
b0 3"
b0 5"
b0 7"
b0 9"
b0 ;"
b0 ="
b10000110000000000000001 9
b10000110000000000000001 5
b11 R
b11 K
b11 _
b11 J"
b10 J
b10 ^
b10 I"
b11 O
b100000010000110000000000000001 =
b100000010000110000000000000001 Q
b100 B
b100 V"
b1000000000000000000000000000000010000000000010000110000000000000001 ]"
b100 A
b100 Z"
b11 8
b11 P
b11 W"
b11 ["
b10 h
b10000000000000000000000000000001000000000000000000000000000000000 n
b10000000000000000000000000000001000000000000000000000000000000000 k
b10 Z
1!
1#
#450
0!
0#
#500
1)
b0 l"
b0 3
b0 ?
b0 u
0f"
0,
0k"
01
0c"
0&
1h"
1.
b1000 ."
0U
0W
b0 E
b0 `
b0 e
b0 g
b0 i
b0 C"
b0 ,"
b0 @"
b0 c
b100 d
b0 w
b0 b
b0 v
b0 B"
b0 @
0G"
b0 O"
b0 Q"
0F"
b0 F
b0 S
b0 a
b0 K"
b0 S"
b11 H
b11 \
b11 m
b11 s
0*
b0 M"
b100 N"
b100000000000000000000000000000001 q
b1 I
b1 ]
b1 p
b1 x
b1 /"
b1 1"
b1 3"
b1 5"
b1 7"
b1 9"
b1 ;"
b1 ="
b1 o
b1 R"
b11 l
b11 P"
b101 <
b101 N
b101 _"
b11 L"
b11000010000000000000001 9
b11000010000000000000001 5
b1 R
b1 K
b1 _
b1 J"
b11 J
b11 ^
b11 I"
1g"
0T"
1-
b11 U"
b11 H"
b11 j
b10000000000000000000000000000001000000000000000000000000000000011 n
b10000000000000000000000000000001000000000000000000000000000000011 k
b11 [
b100 O
b100000011000010000000000000001 =
b100000011000010000000000000001 Q
b101 B
b101 V"
b1010000000000000000000000000000010100000000011000010000000000000001 ]"
b101 A
b101 Z"
b100 8
b100 P
b100 W"
b100 ["
1!
1#
#550
0!
0#
#600
b1000 ."
1*
1U
b100 E
b100 `
b100 e
b100 g
b100 i
b100 C"
b100 ,"
b100 @"
b100 w
b1 O"
b1 Q"
1G"
0T
b1 b
b100 v
0)
b10000000000000000000000000000000000 B"
b100 @
b1 M"
b100 N"
b100 c
b100 d
b1 F
b1 S
b1 a
b1 K"
b1 S"
b100000 l"
b100000 3
b100000 ?
b100000 u
1f"
1,
1k"
11
1c"
1&
0h"
0.
0g"
1T"
0-
1!
1#
#650
0!
0#
#700
b0 l"
b0 3
b0 ?
b0 u
0f"
0,
0k"
01
0c"
0&
1h"
1.
b1000 ."
b0 C
b0 #"
b0 A"
0U
b0 E
b0 `
b0 e
b0 g
b0 i
b0 C"
b0 ,"
b0 @"
b0 c
b100 d
b0 w
bx b
b0 v
1)
b0 B"
b0 @
0E"
b0 O"
b0 Q"
0G"
bx D
bx r
bx t
bx F
bx S
bx a
bx K"
bx S"
x+
bx H
bx \
bx m
bx s
x*
b0 M"
b100 N"
bx I
bx ]
bx p
bx x
bx /"
bx 1"
bx 3"
bx 5"
bx 7"
bx 9"
bx ;"
bx ="
bx o
bx R"
bx l
bx P"
b110 <
b110 N
b110 _"
b1 L"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx 9
bx 5
bx0000000000000000xxxxxxxxxxxxxxxx q
b0xxxxxxxxxxxxxxxx :
b0xxxxxxxxxxxxxxxx \"
bx 6
bx %
bx ;
bx `"
bx L
bx G
bx R
bx K
bx _
bx J"
bx J
bx ^
bx I"
bx 2
bx >
bx a"
1g"
0T"
1-
b1 U"
b1 H"
b100 f
b1000000000000000000000000000000001000000000000000000000000000000011 n
b1000000000000000000000000000000001000000000000000000000000000000011 k
b100 Y
b101 O
bx =
bx Q
b110 B
b110 V"
b110xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000xxxxxxxxxxxxxxxxxxxxxxxxxx ]"
bx A
bx Z"
b101 8
b101 P
b101 W"
b101 ["
1!
1#
#750
0!
0#
#800
0h"
0.
xg"
xT"
x-
1!
1#
#850
0!
0#
